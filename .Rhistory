plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
par(las = 0, mai = c(.25, .25, .25, .25), mar = c(5, 4, 4, 2) + .1, mfrow = c(2,1))
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
par(las = 0, mar = c(5, 4, 4, 2) + .1, mfrow = c(2,1))
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
par(las = 0, mai = c(1.5, 1.5, 1.5, 1.5))
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow = T))
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
par()
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
par(resetPar())
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow = T))
plotmeans(CSI ~ relationship, data = data.slim)
plotmeans(CSI ~ shared.views, data = data.slim)
plotmeans(CSI ~ equality, data = data.slim)
plotMeans <-
function (response, factor1, factor2, error.bars = c("se", "sd",
"conf.int", "none"), level = 0.95, xlab = deparse(substitute(factor1)),
ylab = paste("mean of", deparse(substitute(response))), legend.lab = deparse(substitute(factor2)),
main = "Plot of Means", pch = 1:n.levs.2, lty = 1:n.levs.2,
col = palette(), ylim = NULL)
{
if (!is.numeric(response))
stop(gettextRcmdr("Argument response must be numeric."))
xlab
ylab
legend.lab
error.bars <- match.arg(error.bars)
if (missing(factor2)) {
if (!is.factor(factor1))
stop(gettextRcmdr("Argument factor1 must be a factor."))
valid <- complete.cases(factor1, response)
factor1 <- factor1[valid]
response <- response[valid]
means <- tapply(response, factor1, mean)
sds <- tapply(response, factor1, sd)
ns <- tapply(response, factor1, length)
if (error.bars == "se")
sds <- sds/sqrt(ns)
if (error.bars == "conf.int")
sds <- qt((1 - level)/2, df = ns - 1, lower.tail = FALSE) *
sds/sqrt(ns)
sds[is.na(sds)] <- 0
yrange <- if (error.bars != "none")
c(min(means - sds, na.rm = TRUE), max(means + sds,
na.rm = TRUE))
else range(means, na.rm = TRUE)
levs <- levels(factor1)
n.levs <- length(levs)
if ( is.null(ylim) ) {
plot(c(1, n.levs), yrange, type = "n", xlab = xlab, ylab = ylab,
axes = FALSE, main = main)
} else {
plot(c(1, n.levs), yrange, type = "n", xlab = xlab, ylab = ylab,
axes = FALSE, main = main, ylim = ylim)
}
points(1:n.levs, means, type = "b", pch = 16, cex = 2)
box()
axis(2)
axis(1, at = 1:n.levs, labels = levs)
if (error.bars != "none")
arrows(1:n.levs, means - sds, 1:n.levs, means + sds,
angle = 90, lty = 2, code = 3, length = 0.125)
}
else {
if (!(is.factor(factor1) | is.factor(factor2)))
stop(gettextRcmdr("Arguments factor1 and factor2 must be factors."))
valid <- complete.cases(factor1, factor2, response)
factor1 <- factor1[valid]
factor2 <- factor2[valid]
response <- response[valid]
means <- tapply(response, list(factor1, factor2), mean)
sds <- tapply(response, list(factor1, factor2), sd)
ns <- tapply(response, list(factor1, factor2), length)
if (error.bars == "se")
sds <- sds/sqrt(ns)
if (error.bars == "conf.int")
sds <- qt((1 - level)/2, df = ns - 1, lower.tail = FALSE) *
sds/sqrt(ns)
sds[is.na(sds)] <- 0
yrange <- if (error.bars != "none")
c(min(means - sds, na.rm = TRUE), max(means + sds,
na.rm = TRUE))
else range(means, na.rm = TRUE)
levs.1 <- levels(factor1)
levs.2 <- levels(factor2)
n.levs.1 <- length(levs.1)
n.levs.2 <- length(levs.2)
if (length(pch) == 1)
pch <- rep(pch, n.levs.2)
if (length(col) == 1)
col <- rep(col, n.levs.2)
if (length(lty) == 1)
lty <- rep(lty, n.levs.2)
if (n.levs.2 > length(col))
stop(sprintf(gettextRcmdr("Number of groups for factor2, %d, exceeds number of distinct colours, %d."),
n.levs.2, length(col)))
if ( is.null(ylim) ) {
plot(c(1, n.levs.1 * 1.4), yrange, type = "n", xlab = xlab,
ylab = ylab, axes = FALSE, main = main)
} else {
plot(c(1, n.levs.1 * 1.4), yrange, type = "n", xlab = xlab,
ylab = ylab, axes = FALSE, main = main, ylim = ylim)
}
box()
axis(2)
axis(1, at = 1:n.levs.1, labels = levs.1)
for (i in 1:n.levs.2) {
points(1:n.levs.1, means[, i], type = "b", pch = pch[i],
cex = 2, col = col[i], lty = lty[i])
if (error.bars != "none")
arrows(1:n.levs.1, means[, i] - sds[, i], 1:n.levs.1,
means[, i] + sds[, i], angle = 90, code = 3,
col = col[i], lty = lty[i], length = 0.125)
}
x.posn <- n.levs.1 * 1.1
y.posn <- sum(c(0.1, 0.9) * par("usr")[c(3, 4)])
text(x.posn, y.posn, legend.lab, adj = c(0, -0.5))
legend(x.posn, y.posn, levs.2, pch = pch, col = col,
lty = lty)
}
invisible(NULL)
}
plotMeans(CSI, relationship, conversation, error.bars = "se", ylim = c(0,7))
plotMeans(data.slim$CSI, data.slim$relationship, data.slim$conversation,
error.bars = "se", ylim = c(0,7))
nrow(data.slim$CSI)
length(data.slim$CSI)
length(data.slim$relationship)
length(data.slim$conversation)
plotMeans(data.slim$CSI, data.slim$relationship, data.slim$conversation,
error.bars = "se", ylim = c(0,7))
install.packages(Rcmdr)
install.packages("Rcmdr"")
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
install.packages("reshape2")
library(Rcmdr)
View(plotMeans)
View(plotMeans)
library(Rcmdr)
library(car)
library(readr)
library(psych)
library(gplots)
library(rgl)
library(scatterplot3d)
library(Rcmdr)
mturk.data.raw <- read.csv("2015.11.22.PC.Results.MTurk.csv",
sep = "\t", stringsAsFactors = F)
attention.filter.good <- mturk.data.raw$good.ATTENTIONCHECK == 6 &
is.na(mturk.data.raw$bad.ATTENTIONCHECK)
#needed bad conversation values: entered right value on attention check
#AND didn't asnwer good conversation attention check
attention.filter.bad <- mturk.data.raw$bad.ATTENTIONCHECK == 6 &
is.na(mturk.data.raw$good.ATTENTIONCHECK)
#make new dataframe with only approved subject data
mturk.data.df <- subset(mturk.data.raw,
subset = attention.filter.good | attention.filter.bad)
mturk.data.df$good.CSI.2r <- 7 - mturk.data.df$good.CSI.2
mturk.data.df$bad.CSI.2r <- 7 - mturk.data.df$bad.CSI.2
mturk.data.df$good.CSI.5r <- 7 - mturk.data.df$good.CSI.5
mturk.data.df$bad.CSI.5r <- 7 - mturk.data.df$bad.CSI.5
mturk.data.df$good.CSI.6r <- 7 - mturk.data.df$good.CSI.6
mturk.data.df$bad.CSI.6r <- 7 - mturk.data.df$bad.CSI.6
mturk.data.df$good.CSI.11r <- 7 - mturk.data.df$good.CSI.11
mturk.data.df$bad.CSI.11r <- 7 - mturk.data.df$bad.CSI.11
mturk.data.df$good.CSI.12r <- 7 - mturk.data.df$good.CSI.12
mturk.data.df$bad.CSI.12r <- 7 - mturk.data.df$bad.CSI.12
mturk.data.df$good.CSI.17r <- 7 - mturk.data.df$good.CSI.17
mturk.data.df$bad.CSI.17r <- 7 - mturk.data.df$bad.CSI.17
mturk.data.df$good.CSI.18r <- 7 - mturk.data.df$good.CSI.18
mturk.data.df$bad.CSI.18r <- 7 - mturk.data.df$bad.CSI.18
mturk.data.df$good.CSI.19r <- 7 - mturk.data.df$good.CSI.19
mturk.data.df$bad.CSI.19r <- 7 - mturk.data.df$bad.CSI.19
#create helper function to average good/bad CSI, relationship, insert into df
helper.function <- function(df){
#have to calculate average cSI per subject -- traverse by row
count <- nrow(df)
#initialize variables, columns
good.sum <- 0
bad.sum <- 0
df$good.CSI.AVG <- 0
df$bad.CSI.AVG <- 0
df$relationship.measure <- 0
for(i in 1:count){
#traverse by column to sum CSI; have to do this manually
#not trying to head down the assign/get rabbit hole with grep & paste
#good first
good.sum <- sum(df$good.CSI.1[i], df$good.CSI.2r[i], df$good.CSI.3[i],
df$good.CSI.4[i], df$good.CSI.5r[i], df$good.CSI.6r[i],
df$good.CSI.7[i], df$good.CSI.8[i], df$good.CSI.9[i],
df$good.CSI.10[i], df$good.CSI.11r[i], df$good.CSI.12r[i],
df$good.CSI.13[i], df$good.CSI.14[i], df$good.CSI.15[i],
df$good.CSI.16[i], df$good.CSI.17r[i], df$good.CSI.18r[i],
df$good.CSI.19r[i], na.rm = T)
#then bad
bad.sum <- sum(df$bad.CSI.1[i], df$bad.CSI.2r[i], df$bad.CSI.3[i],
df$bad.CSI.4[i], df$bad.CSI.5r[i], df$bad.CSI.6r[i],
df$bad.CSI.7[i], df$bad.CSI.8[i], df$bad.CSI.9[i],
df$bad.CSI.10[i], df$bad.CSI.11r[i], df$bad.CSI.12r[i],
df$bad.CSI.13[i], df$bad.CSI.14[i], df$bad.CSI.15[i],
df$bad.CSI.16[i], df$bad.CSI.17r[i], df$bad.CSI.18r[i],
df$bad.CSI.19r[i], na.rm = T)
good.mean <- good.sum/19
bad.mean <- bad.sum/19
#relationship
relationship.sum <- sum(df$get.along[i],
df$enjoy.company[i],
df$comfortable.personal[i])
relationship.mean <- relationship.sum/3
#assign to spot in corresponding column
df$good.CSI.AVG[i] <- good.mean
df$bad.CSI.AVG[i]  <- bad.mean
df$relationship.measure[i] <- relationship.mean
}
df
}
#apply to mturk.data.df
mturk.data.avg <- helper.function(mturk.data.df)
data.slim <- as.data.frame(matrix(data = 0, nrow = 66, ncol = 1))
for(j in 1:nrow(mturk.data.df)){
#condition
data.slim$condition[j] <- mturk.data.avg$condition[j]
#conversation: good or bad
if (mturk.data.avg$condition[j] == 1 | mturk.data.avg$condition[j] == 2){
data.slim$conversation[j] <- "good"
}
else
data.slim$conversation[j] <- "bad"
#target: friend/boss
if (mturk.data.avg$condition[j] %% 2 == 0){
data.slim$target[j] <- "friend"
}
else
data.slim$target[j] <- "boss"
#relationship
data.slim$relationship[j] <- mturk.data.avg$relationship.measure[j]
#equality
data.slim$equality[j] <- mturk.data.avg$equality[j]
#perceived.power
data.slim$power[j] <- mturk.data.avg$perceived.power[j]
#shared.views
data.slim$shared.views[j] <- mturk.data.avg$shared.views[j]
#CSI          - good.CSI.AVG | bad.CSI.AVG
if(data.slim$conversation[j] == "bad"){
data.slim$CSI[j] <- mturk.data.avg$bad.CSI.AVG[j]
}
else{
data.slim$CSI[j] <- mturk.data.avg$good.CSI.AVG[j]
}
#age          - good.age
data.slim$age[j] <- mturk.data.avg$good.age[j]
#gender       - good.gender
data.slim$gender[j] <- mturk.data.avg$good.gender[j]
#edu          - good.college
data.slim$edu[j] <- mturk.data.avg$good.college[j]
}
data.slim$conversation <- as.factor(data.slim$conversation)
data.slim$target <- as.factor(data.slim$target)
#first col is placeholder--remove
data.slim <- data.slim[,-1]
good.boss.df <- subset(data.slim, subset = data.slim$condition == 1)
good.friend.df <- subset(data.slim, subset = data.slim$condition == 2)
bad.boss.df <- subset(data.slim, subset = data.slim$condition == 3)
bad.friend.df <- subset(data.slim, subset = data.slim$condition == 4)
list.data <- list(good.boss.df, good.friend.df,
bad.boss.df, bad.friend.df)
modCSP <- lm(CSI ~ power + conversation +
age + edu + gender, data = data.slim)
modCSR <- lm(CSI ~ relationship + conversation +
age + edu + gender, data = data.slim)
age + edu + gender, data = data.slim)
modCSS <- lm(CSI ~ shared.views + conversation +
age + edu + gender, data = data.slim)
modCSE <- lm(CSI ~ equality + conversation +
age + edu + gender, data = data.slim)
modPR <- lm(power ~ relationship + conversation +
age + edu + gender, data = data.slim)
modCSP <- lm(CSI ~ power + conversation +
age + edu + gender, data = data.slim)
modCSR <- lm(CSI ~ relationship + conversation +
age + edu + gender, data = data.slim)
modCSS <- lm(CSI ~ shared.views + conversation +
age + edu + gender, data = data.slim)
modCSE <- lm(CSI ~ equality + conversation +
age + edu + gender, data = data.slim)
modPR <- lm(power ~ relationship + conversation +
age + edu + gender, data = data.slim)
modPS <- lm(power ~ shared.views + conversation +
age + edu + gender, data = data.slim)
modPE <- lm(power ~ equality + conversation +
age + edu + gender, data = data.slim)
modRS <- lm(relationship ~ shared.views + conversation +
age + edu + gender, data = data.slim)
modRE <- lm(relationship ~ equality + conversation +
age + gender + edu, data = data.slim)
modSE <- lm(shared.views ~ equality + conversation +
age + gender + edu, data = data.slim)
modCSE.S.R <- lm(CSI ~ equality * shared.views * relationship + conversation +
age + gender + edu, data = data.slim)
modCSCT <- lm(CSI ~ conversation + target + power + relationship +
shared.views + equality + age + edu + gender,
data = data.slim)
attach(data.slim)
plotMeans(CSI, power, conversation, error.bars = "se", ylim = c(0,7))
plotMeans(CSI, power, error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7))
par(resetPar())
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
par(resetPar())
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(relationship), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7), pch = 3)
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7), pch = 4)
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7), pch = 2)
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7), col = "blue")
plotMeans(CSI, as.factor(shared.views), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(equality),
error.bars = "se", ylim = c(0,7), ylab = "relationship")
plotMeans(realtionship, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(reltionship, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(equality),
error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(relationship), error.bars = "se", ylim = c(0,7))
plotMeans(shared.views, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(power), error.bars = "se", ylim = c(0,7))
plotMeans(relationship, as.factor(equality), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(target), error.bars = "se", ylim = c(0,7))
plotMeans(CSI, as.factor(power))
plotMeans(CSI, as.factor(power), error.bars = "se")
plotMeans(CSI, as.factor(target), ylim = c(0,7))
plotMeans(CSI, as.factor(target), ylim = c(3,6))
plotMeans(CSI, as.factor(relationship), as.factor(shared.views))
plotMeans(CSI, as.factor(relationship), as.factor(conversation))
plotmeans(CSI, as.factor(shared.views), as.factor(conversation))
plotMeans(CSI, as.factor(shared.views), as.factor(conversation))
plotMeans(CSI, as.factor(power))
plotMeans(CSI, as.factor(power), ylim = 1, 7)
plotMeans(CSI, as.factor(power), ylim = c(1, 7)
plotMeans(CSI, as.factor(power), ylim = c(1, 7))
plotMeans(CSI, as.factor(power), ylim = c(3, 7))
plotMeans(CSI, as.factor(relationship), as.factor(conversation))
plotMeans(CSI, as.factor(relationship), as.factor(conversation), ylim = c(0,7))
plotMeans(CSI, as.factor(shared.views), as.factor(conversation))
plotMeans(CSI, as.factor(shared.views), as.factor(conversation), ylim = c(0,7))
plotmeans(CSI, as.factor(equality), as.factor(conversation), ylim = c(0,7))
plotMeans(CSI, as.factor(equality), as.factor(conversation), ylim = c(0,7))
plotMeans(CSI, as.factor(equality))
plotMeans(equality, as.factor(power), ylim = c(0,7))
plotMeans(equality, as.factor(power), ylim = c(4,7))
plotMeans(CSI, as.factor(equality), ylim = c(0,7))
plotMeans(CSI, as.factor(shared.views), ylim = c(0,7))
plotMeans(CSI, as.factor(shared.views), ylim = c(1,6))
plotMeans(CSI, as.factor(relationship), ylim = c(0,7))
plotMeans(CSI, as.factor(conversation))
plotMeans(CSI, as.factor(conversation), ylim = c(4, 6))
plotMeans(CSI, as.factor(conversation), ylim = c(3.5, 6))
plotMeans(CSI, as.factor(conversation), ylim = c(1, 7))
mod <- lm(CSI ~ power * target)
summary(mod)
modCSP.T <- lm(CSI ~ power * target)
describe(CSI)
confint(modCSP.T)
plotMeans(CSI, as.factor(power))
?scatter3d
scatter3d(CSI, as.numeric(power), as.numeric(target))
scatter3d(CSI, as.numeric(target), as.numeric(power))
scatter3d(as.numeric(target), CSI, as.numeric(power))
scatter3d(as.numeric(target), CSI, as.numeric(power))
scatterplot3d(as.numeric(target), CSI, as.numeric(power), color = as.numeric(target))
scatterplot3d(as.numeric(power), CSI, as.numeric(target), color = as.numeric(target))
abline(b = 1, a = 2)
summary(mod)
mod <- lm(CSI ~ target + equality)
summary(mod)
mod <- lm(target ~ equality)
summary(mod)
mod <- lm(equality ~ target)
summary(mod)
?relevel
data.slim <- as.data.frame(matrix(data = 0, nrow = 66, ncol = 1))
for(j in 1:nrow(mturk.data.df)){
#condition
data.slim$condition[j] <- mturk.data.avg$condition[j]
#conversation: good or bad
if (mturk.data.avg$condition[j] == 1 | mturk.data.avg$condition[j] == 2){
data.slim$conversation[j] <- "good"
}
else
data.slim$conversation[j] <- "bad"
#target: friend/boss
if (mturk.data.avg$condition[j] %% 2 == 0){
data.slim$authority[j] <- "friend"
}
else
data.slim$authority[j] <- "boss"
#relationship
data.slim$relationship[j] <- mturk.data.avg$relationship.measure[j]
#equality
data.slim$equality[j] <- mturk.data.avg$equality[j]
#perceived.power
data.slim$power[j] <- mturk.data.avg$perceived.power[j]
#shared.views
data.slim$shared.views[j] <- mturk.data.avg$shared.views[j]
#CSI          - good.CSI.AVG | bad.CSI.AVG
if(data.slim$conversation[j] == "bad"){
data.slim$CSI[j] <- mturk.data.avg$bad.CSI.AVG[j]
}
else{
data.slim$CSI[j] <- mturk.data.avg$good.CSI.AVG[j]
}
#age          - good.age
data.slim$age[j] <- mturk.data.avg$good.age[j]
#gender       - good.gender
data.slim$gender[j] <- mturk.data.avg$good.gender[j]
#edu          - good.college
data.slim$edu[j] <- mturk.data.avg$good.college[j]
}
data.slim$conversation <- as.factor(data.slim$conversation)
data.slim$authority <- relevel(as.factor(data.slim$authority), "friend")
#first col is placeholder--remove
data.slim <- data.slim[,-1]
plotMeans(CSI, authority, ylim = c(3,6))
attach(data.slim)
summary(lm(CSI ~ power + equality))
summary(lm(CSI ~ power * equality))
summary(lm(Cpower ~ authority))
summary(lm(power ~ authority))
modPA <- lm(power ~ equality
+ age + edu + gender, data= data.slim)
summary(modPA)
modCSP.A <- lm(CSI ~ power * authority + conversation
+ age + gender + edu, data = data.slim)
summary(modCSP.A)
modPA <- lm(power ~ equality  + conversation
+ age + edu + gender, data= data.slim)
summary(modPA)
modCSA <- lm(CSI ~ authority + conversation +
age + edu + gender, data = data.slim)
summary(modCSA)
summary(modPA)
modPA <- lm(power ~ authority  + conversation
+ age + edu + gender, data= data.slim)
summary(modPA)
summary(modCSIA)
summary(modCSA)
confint(modCSA)
summary(modCSP)
summary(modCSP.A)
summary(modCSP)
summary(modCSP.A)
summary(modPA)
scatter3d(as.numeric(target), CSI, as.numeric(power))
summary(modCSP.A)
confint(modCSP.A)
plotMeans(CSI, as.factor(power))
plotMeans(CSI, as.factor(power), ylim = c(3,7))
plotMeans(CSI, as.factor(authority))
plotMeans(CSI, as.factor(authority), ylim = c(3, 7))
plotMeans(equality, as.factor(power), ylim = c(4,7))
summary(modCSR)
summary(modCSS)
summary(modCSE)
scatter3d(CSI ~ power + as.numeric(conversation), data = data.slim)
summary(modPR)
summary(modCSCA)
modCSCA <- lm(CSI ~ conversation + authority + power + relationship +
shared.views + equality + age + edu + gender,
data = data.slim)
summary(modCSCA)
modCSC.A <- lm(CSI ~ conversation * authority + power + relationship +
shared.views + equality + age + edu + gender,
data = data.slim)
summary(modCSC.A)
summary(modPR)
summary(modPS)
summary(modCSE.S.R)
scatter3d(as.numeric(target), CSI, as.numeric(power))
